{"version":3,"sources":["components/Api.js","components/sidebar/ToggleButton.js","components/Navbar.js","components/sidebar/Sidebar.js","components/Distance.js","components/Map.js","components/SignUpForm.js","components/Form.js","components/SignInForm.js","App.js","serviceWorker.js","index.js"],"names":["lat2","lon2","ToggleButton","props","className","onClick","click","Navbar","drawerClickHandler","to","Sidebar","Distance","geoSuccess","position","setState","ready","where","lat","coords","latitude","lng","longitude","geoFailure","err","error","message","state","this","navigator","geolocation","getCurrentPosition","enableHighAccuracy","timeOut","maximumAge","Component","Map","selectedPlug","viewport","width","height","zoom","setUserLocation","long","mapboxApiAccessToken","process","mapStyle","onViewportChange","plugData","map","plug","key","ID","AddressInfo","Latitude","Longitude","class","e","preventDefault","src","alt","onClose","Title","AddressLine1","AddressLine2","Postcode","Town","React","showPosition","alert","Api","items","isLoaded","fetch","then","res","json","result","console","log","item","style","display","margin","marginTop","Img","variant","Math","floor","random","Body","Text","Item","lat1","lon1","radlat1","PI","radlat2","theta","radtheta","dist","sin","cos","acos","toFixed","distance","SignUpForm","email","password","name","hasAgreed","handleChange","bind","handleSubmit","target","value","type","checked","onSubmit","htmlFor","id","placeholder","onChange","Form","basename","activeClassName","exact","path","component","SignInForm","App","sidebarOpen","ToggleClickHandler","prevState","backdropClickHandler","sidebar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","registration","unregister"],"mappings":"835YAKIA,EAAMC,E,4ECMKC,G,YARM,SAAAC,GAAK,OACtB,4BAAQC,UAAU,gBAAgBC,QAASF,EAAMG,OAC7C,yBAAKF,UAAU,uBACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,0B,gBCkBRG,EApBA,SAAAJ,GAAK,OAChB,4BAAQC,UAAU,WACd,yBAAKA,UAAU,sBACX,6BACI,kBAAC,EAAD,CAAcE,MAAOH,EAAMK,sBAE/B,yBAAKJ,UAAU,gBAAe,kBAAC,IAAD,CAAMK,GAAG,KAAT,gBAC9B,yBAAKL,UAAU,WACf,yBAAKA,UAAU,4BACX,4BACI,4BAAI,kBAAC,IAAD,CAAMK,GAAG,aAAT,aACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,aAAT,kBCATC,G,MAbC,SAAAP,GAAK,OACjB,yBAAKC,UAAU,gCACX,4BAEI,4BAAI,kBAAC,IAAD,CAAMK,GAAG,KAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,gBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,qBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,wBC2CDE,E,YAlDX,aAAc,IAAD,8BACT,+CAkBJC,WAAa,SAACC,GAGV,EAAKC,SAAS,CACVC,OAAM,EACNC,MAAO,CAACC,IAAKJ,EAASK,OAAOC,SAASC,IAAIP,EAASK,OAAOG,cAxBrD,EA2BbC,WAAa,SAACC,GACV,EAAKT,SAAS,CAACU,MAAOD,EAAIE,WA1B1B,EAAKC,MAAQ,CACTX,OAAO,EACPC,MAAO,CAACC,IAAI,KAAMG,IAAI,MACtBI,MAAO,MALF,E,iFAcTG,KAAKb,SAAS,CAACC,OAAM,EAAOS,MAAO,OACnCI,UAAUC,YAAYC,mBAAoBH,KAAKf,WACPe,KAAKL,WAP5B,CACbS,oBAAoB,EACpBC,QAAS,IACTC,WAAY,U,+BAmBhB,OACI,8BACON,KAAKD,MAAMX,OACd,mEAEEY,KAAKD,MAAMF,OACb,6BAAMG,KAAKD,MAAMF,OAEfG,KAAKD,MAAMX,OACT,iDACaY,KAAKD,MAAMV,MAAMC,IAD9B,+CAEaU,KAAKD,MAAMV,MAAMI,W,GA3C3Bc,a,gBCgGRC,E,2MA1FbT,MAAQ,CACNU,aAAc,KACdC,SAAU,CACRlB,SAAU,UACVE,UAAW,UACXiB,MAAO,QACPC,OAAQ,QACRC,KAAM,K,EAIRC,gBAAkB,WAChBb,UAAUC,YAAYC,mBAAmB,SAAAjB,GACtC,IAAI4B,EAAkB,CAClBxB,IAAKJ,EAASK,OAAOC,SACrBuB,KAAM7B,EAASK,OAAOG,WAGzB,EAAKP,SAAS,CACZ2B,gBAAiBA,O,wEAMf,IAAD,OACL,OACE,yBAAKrC,UAAU,OAEb,8BAEI,kBAAC,IAAD,iBAAiBuB,KAAKD,MAAMW,SAA5B,CACEM,qBAAsBC,4FACtBC,SAAS,oDACTC,iBAAkB,SAAAT,GAChB,EAAKvB,SAAS,CAAEuB,gBAGjBU,IAAkBC,IAAI,SAAAC,GAAI,OACzB,kBAAC,IAAD,CACEC,IAAKD,EAAKE,GACVhC,SAAU8B,EAAKG,YAAYC,SAC3BhC,UAAW4B,EAAKG,YAAYE,WAG5B,4BAAQC,MAAM,SACZlD,QAAS,SAAAmD,GACPA,EAAEC,iBACF,EAAK3C,SAAS,CACZsB,aAAca,MAIlB,yBAAKS,IAAI,qBAAqBC,IAAI,aAMvChC,KAAKD,MAAMU,aACV,kBAAC,IAAD,CACEjB,SAAUQ,KAAKD,MAAMU,aAAagB,YAAYC,SAC9ChC,UAAWM,KAAKD,MAAMU,aAAagB,YAAYE,UAC/CM,QAAS,WACP,EAAK9C,SAAS,CACZsB,aAAc,SAIlB,6BACE,4BAAKT,KAAKD,MAAMU,aAAagB,YAAYS,OACzC,4BAAKlC,KAAKD,MAAMU,aAAagB,YAAYU,cACzC,4BAAKnC,KAAKD,MAAMU,aAAagB,YAAYW,cACzC,4BAAKpC,KAAKD,MAAMU,aAAagB,YAAYY,UACzC,4BAAKrC,KAAKD,MAAMU,aAAagB,YAAYa,QAI3C,MAIN,kBAAC,EAAD,Y,GAnFEC,IAAMhC,W,mDLOxB,SAASiC,EAAatD,GACpBb,EAAOa,EAASK,OAAOC,SACvBlB,EAAOY,EAASK,OAAOG,UATnBO,UAAUC,YACZD,UAAUC,YAAYC,mBAAmBqC,GAEzCC,MAAM,qB,IA6FKC,E,YA1Db,WAAYlE,GAAO,IAAD,8BACd,4CAAMA,KACDuB,MAAQ,CACT4C,MAAO,GACPC,UAAU,GAJA,E,iFAQG,IAAD,OAEhBC,MADQ,6GAEHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJ,EAAK9D,SAAS,CACZyD,UAAU,EACVD,MAAOM,Q,+BAKT,IAAD,EACiBjD,KAAKD,MAAxB6C,EADE,EACFA,SAAUD,EADR,EACQA,MAEf,OADAO,QAAQC,IAAI,QAASR,GAChBC,EAID,6BAEKD,EAAMtB,IAAI,SAAA+B,GAAI,OACb,kBAAC,IAAD,CAAUC,MAAO,CAACC,QAAQ,eAAgBC,OAAO,cAC/C,yBAAKhC,IAAK6B,EAAK5B,IACb,kBAAC,IAAD,CAAM6B,MAAO,CAAE1C,MAAO,QAAS6C,UAAW,SAC1C,kBAAC,IAAKC,IAAN,CAAUC,QAAQ,MAAM3B,IAAG,UAAK4B,KAAKC,MAAM,EAAkB,EAAdD,KAAKE,UAAzB,QAA4C7B,IAAI,SAASpB,OAAO,UACzF,kBAAC,IAAKkD,KAAN,KACE,kBAAC,IAAK5B,MAAN,KAAakB,EAAK3B,YAAYS,OAC9B,kBAAC,IAAK6B,KAAN,OAGA,kBAAC,IAAD,CAAWtF,UAAU,oBACnB,kBAAC,IAAUuF,KAAX,uBAAgCZ,EAAK5B,IACrC,kBAAC,IAAUwC,KAAX,kBAA2BZ,EAAK3B,YAAYU,cAC5C,kBAAC,IAAU6B,KAAX,eAAwBZ,EAAK3B,YAAYa,MACzC,kBAAC,IAAU0B,KAAX,kBACG,yBAAKjC,IAAI,oBAAoBC,IAAI,gBAAgBpB,OAAO,SApEnF,SAAkBqD,EAAMC,EAAM7F,EAAMC,GACnC,GAAK2F,IAAS5F,GAAU6F,IAAS5F,EAChC,OAAO,EAEP,IAAI6F,EAAUR,KAAKS,GAAKH,EAAO,IAC9BI,EAAUV,KAAKS,GAAK/F,EAAO,IAC3BiG,EAAQJ,EAAO5F,EACfiG,EAAWZ,KAAKS,GAAKE,EAAQ,IAC7BE,EAAOb,KAAKc,IAAIN,GAAWR,KAAKc,IAAIJ,GAAWV,KAAKe,IAAIP,GAAWR,KAAKe,IAAIL,GAAWV,KAAKe,IAAIH,GAQjG,OANAC,EAAOA,EAAO,EAAI,EAAIA,EAGtBA,EAAc,IADdA,EAAc,KADdA,EAAOb,KAAKgB,KAAKH,IACGb,KAAKS,IACN,QACnBI,GAAc,UAEFI,QAAQ,GAqDMC,CAASzB,EAAK3B,YAAYC,SAAU0B,EAAK3B,YAAYE,UAAWtD,EAAMC,GAF1E,aAhBhB,KAHK,gD,GAzBKiC,a,sBMsBHuE,E,YA/DX,aAAe,IAAD,8BACV,+CAEK/E,MAAQ,CACTgF,MAAO,GACPC,SAAU,GACVC,KAAM,GACNC,WAAW,GAGf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAXV,E,0EAcDvD,GACT,IAAIyD,EAASzD,EAAEyD,OACXC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DN,EAAOK,EAAOL,KAElBjF,KAAKb,SAAL,eACG8F,EAAOM,M,mCAID1D,GACTA,EAAEC,iBAEFoB,QAAQC,IAAI,mDACZD,QAAQC,IAAInD,KAAKD,S,+BAIjB,OACA,yBAAKtB,UAAU,cACX,0BAAMiH,SAAU1F,KAAKqF,aAAc5G,UAAU,cAC3C,yBAAKA,UAAU,aACb,2BAAOA,UAAU,mBAAmBkH,QAAQ,QAA5C,aACA,2BAAOH,KAAK,OAAOI,GAAG,OAAOnH,UAAU,mBAAmBoH,YAAY,uBAAuBZ,KAAK,OAAOM,MAAOvF,KAAKD,MAAMkF,KAAMa,SAAU9F,KAAKmF,gBAElJ,yBAAK1G,UAAU,aACb,2BAAOA,UAAU,mBAAmBkH,QAAQ,YAA5C,YACA,2BAAOH,KAAK,WAAWI,GAAG,WAAWnH,UAAU,mBAAmBoH,YAAY,sBAAsBZ,KAAK,WAAWM,MAAOvF,KAAKD,MAAMiF,SAAUc,SAAU9F,KAAKmF,gBAEjK,yBAAK1G,UAAU,aACb,2BAAOA,UAAU,mBAAmBkH,QAAQ,SAA5C,kBACA,2BAAOH,KAAK,QAAQI,GAAG,QAAQnH,UAAU,mBAAmBoH,YAAY,mBAAmBZ,KAAK,QAAQM,MAAOvF,KAAKD,MAAMgF,MAAOe,SAAU9F,KAAKmF,gBAXpJ,SAcE,yBAAK1G,UAAU,aACb,2BAAOA,UAAU,4BACb,2BAAOA,UAAU,sBAAsB+G,KAAK,WAAWP,KAAK,YAAYM,MAAOvF,KAAKD,MAAMmF,UAAWY,SAAU9F,KAAKmF,eADxH,8BACmK,kBAAC,IAAD,CAAMrG,GAAG,GAAGL,UAAU,wBAAtB,sBAhBvK,SAoBE,yBAAKA,UAAU,aACX,4BAAQA,UAAU,2BAAlB,WADJ,IACiE,kBAAC,IAAD,CAAMK,GAAG,WAAWL,UAAU,mBAA9B,6B,GAxDtD8B,aCiCVwF,G,uLA3BX,OACE,kBAAC,IAAD,CAAQC,SAAS,mBACf,yBAAKvH,UAAU,QACb,yBAAKA,UAAU,eACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBAEX,kBAAC,IAAD,CAASK,GAAG,YAAYmH,gBAAgB,6BAA6BxH,UAAU,sBAA/E,YAHN,SAMI,yBAAKA,UAAU,aAEX,kBAAC,IAAD,CAASyH,OAAK,EAACpH,GAAG,YAAYmH,gBAAgB,0BAA0BxH,UAAU,mBAAlF,YARR,SAWI,kBAAC,IAAD,CAAO0H,KAAK,YAAYC,UAAWtB,KAbzC,e,GAJWvE,cCkDJ8F,E,YApDX,aAAe,IAAD,8BACV,+CAEKtG,MAAQ,CACTgF,MAAO,GACPC,SAAU,IAGd,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATV,E,0EAYDvD,GACT,IAAIyD,EAASzD,EAAEyD,OACXC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DN,EAAOK,EAAOL,KAElBjF,KAAKb,SAAL,eACG8F,EAAOM,M,mCAID1D,GACTA,EAAEC,iBAEFoB,QAAQC,IAAI,mDACZD,QAAQC,IAAInD,KAAKD,S,+BAIjB,OACA,yBAAKtB,UAAU,cACX,0BAAMiH,SAAU1F,KAAKqF,aAAc5G,UAAU,cAC3C,yBAAKA,UAAU,aACb,2BAAOA,UAAU,mBAAmBkH,QAAQ,SAA5C,kBACA,2BAAOH,KAAK,QAAQI,GAAG,QAAQnH,UAAU,mBAAmBoH,YAAY,mBAAmBZ,KAAK,QAAQM,MAAOvF,KAAKD,MAAMgF,MAAOe,SAAU9F,KAAKmF,gBAHpJ,SAME,yBAAK1G,UAAU,aACb,2BAAOA,UAAU,mBAAmBkH,QAAQ,YAA5C,YACA,2BAAOH,KAAK,WAAWI,GAAG,WAAWnH,UAAU,mBAAmBoH,YAAY,sBAAsBZ,KAAK,WAAWM,MAAOvF,KAAKD,MAAMiF,SAAUc,SAAU9F,KAAKmF,gBARnK,SAWE,yBAAK1G,UAAU,aACX,4BAAQA,UAAU,2BAAlB,WADJ,IACiE,kBAAC,IAAD,CAAMK,GAAG,IAAIL,UAAU,mBAAvB,4B,GA7CtD8B,aC0DV+F,G,iNA9CbvG,MAAQ,CACNwG,aAAa,G,EAGfC,mBAAqB,WACnB,EAAKrH,SAAS,SAACsH,GACb,MAAO,CAAEF,aAAcE,EAAUF,gB,EAIrCG,qBAAuB,WACrB,EAAKvH,SAAS,CAAEoH,aAAa,K,wEAI7B,IAAII,EAQJ,OALI3G,KAAKD,MAAMwG,cACbI,EAAU,kBAAC,EAAD,OAKV,kBAAC,IAAD,KACE,yBAAKtD,MAAO,CAACzC,OAAQ,SACnB,kBAAC,EAAD,CAAQ/B,mBAAoBmB,KAAKwG,qBAChCG,EACD,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOR,KAAK,YAAYD,OAAK,EAACE,UAAW1D,IACzC,kBAAC,IAAD,CAAOyD,KAAK,SAASD,OAAK,EAACE,UAAWC,IACtC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,YAAYC,UAAWL,IAGzC,kBAAC,EAAD,a,GAnCKxD,IAAMhC,YCHJqG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBnH,WACrBA,UAAUoH,cAAcjI,MAAM0D,KAAK,SAAAwE,GACjCA,EAAaC,iB","file":"static/js/main.2e07fd02.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport CardDeck from 'react-bootstrap/CardDeck';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\nlet lat2, lon2 ;\r\n\r\nfunction getLocation() {\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(showPosition);\r\n  } else { \r\n    alert(\"Allow location on\");\r\n  }\r\n}\r\n\r\nfunction showPosition(position) {\r\n  lat2 = position.coords.latitude\r\n  lon2 = position.coords.longitude;\r\n}\r\n\r\ngetLocation();\r\n\r\nfunction distance(lat1, lon1, lat2, lon2) {\r\n\tif ((lat1 === lat2) && (lon1 === lon2)) {\r\n\t\treturn 0;\r\n\t} else {\r\n\t\tlet radlat1 = Math.PI * lat1 / 180,\r\n\t\t\tradlat2 = Math.PI * lat2 / 180,\r\n\t\t\ttheta = lon1 - lon2,\r\n\t\t\tradtheta = Math.PI * theta / 180,\r\n\t\t\tdist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n\r\n\t\tdist = dist > 1 ? 1 : dist;\r\n\t\tdist = Math.acos(dist);\r\n\t\tdist = dist * 180 / Math.PI;\r\n\t\tdist = dist * 60 * 1.1515;\r\n\t\tdist = dist * 1.609344\r\n\r\n\t\treturn dist.toFixed(2);\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\nclass Api extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          items: [],\r\n          isLoaded: false,\r\n  }\r\n}\r\n\r\n  componentDidMount() {\r\n   const url= 'https://api.openchargemap.io/v3/poi/?output=json&countrycode=FI&maxresults=500&compact=true&verbose=false'\r\n      fetch(url)\r\n          .then(res => res.json())\r\n          .then(result => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items: result,\r\n            })\r\n          });\r\n  } \r\n\r\n  render() {\r\n    var {isLoaded, items} = this.state;\r\n    console.log('items', items)\r\n    if (!isLoaded) {\r\n      return <div>loading....</div>\r\n    } else {\r\n      return (\r\n        <div>\r\n          \r\n            {items.map(item => (\r\n              <CardDeck style={{display:'inline-block', margin:'auto auto'}}>\r\n                <div key={item.ID}>\r\n                  <Card style={{ width: '23rem', marginTop: '56px' }}>\r\n                  <Card.Img variant=\"top\" src={`${Math.floor(1 + Math.random()*5)}.jpg`} alt=\"fortum\" height=\"250px\" />\r\n                    <Card.Body>\r\n                      <Card.Title>{item.AddressInfo.Title}</Card.Title>\r\n                      <Card.Text>\r\n                      </Card.Text>\r\n                    </Card.Body>  \r\n                      <ListGroup className=\"list-group-flush\">\r\n                        <ListGroup.Item> Customer ID : {item.ID}</ListGroup.Item>\r\n                        <ListGroup.Item>Address : {item.AddressInfo.AddressLine1}</ListGroup.Item>\r\n                        <ListGroup.Item>City : {item.AddressInfo.Town}</ListGroup.Item>\r\n                        <ListGroup.Item>Distance : \r\n                           <img src=\"location_icon.svg\" alt=\"location_icon\" height=\"20px\"></img> \r\n                           {distance(item.AddressInfo.Latitude, item.AddressInfo.Longitude, lat2, lon2)} km</ListGroup.Item>\r\n                      </ListGroup>\r\n                  </Card>\r\n                </div>\r\n              </CardDeck>\r\n            ))};\r\n        \r\n        </div>\r\n        );\r\n    }\r\n     \r\n}\r\n}\r\nexport default Api;\r\n","import React from 'react';\r\nimport './ToggleButton.css';\r\n\r\nconst ToggleButton = props => (\r\n    <button className=\"toggle-button\" onClick={props.click}>\r\n        <div className=\"toggle-button_line\" />\r\n        <div className=\"toggle-button_line\" />\r\n        <div className=\"toggle-button_line\" />\r\n    </button>\r\n);\r\n\r\nexport default ToggleButton;","import React from 'react';\r\nimport ToggleButton from './sidebar/ToggleButton';\r\nimport './Navbar.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = props => (\r\n    <header className=\"toolbar\">\r\n        <nav className=\"toolbar_navigation\">\r\n            <div>\r\n                <ToggleButton click={props.drawerClickHandler} />\r\n            </div>\r\n            <div className=\"toolbar_logo\"><Link to=\"/\">Travel Plug</Link></div>\r\n            <div className=\"spacer\" />\r\n            <div className=\"toolbar_navigation_items\">\r\n                <ul>\r\n                    <li><Link to=\"/stations\">Stations</Link></li>\r\n                    <li><Link to=\"/login\">Login</Link></li>\r\n                    <li><Link to=\"/register\">Register</Link></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    </header>\r\n);\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Sidebar.css';\r\n\r\nconst Sidebar = props => (\r\n    <nav className=\"side-bar animated fadeInLeft\">\r\n        <ul>\r\n            {/* {<input type=\"text\"></input>} */}\r\n            <li><Link to=\"/\">Plugs</Link></li>\r\n            <li><Link to=\"/\">Add Station</Link></li>\r\n            <li><Link to=\"/\">TravelPlug Store</Link></li>\r\n            <li><Link to=\"/\">Submit Feedback</Link></li>\r\n\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default Sidebar;","import React, { Component } from 'react';\r\n\r\n\r\nclass Distance extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            ready: false,\r\n            where: {lat:null, lng:null},\r\n            error: null\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        let geoOptions = {\r\n            enableHighAccuracy: true,\r\n            timeOut: 20000,\r\n            maximumAge: 60 * 60 * 24\r\n        };\r\n        this.setState({ready:false, error: null });\r\n        navigator.geolocation.getCurrentPosition( this.geoSuccess, \r\n                                                this.geoFailure,\r\n                                                geoOptions);\r\n    }\r\n    geoSuccess = (position) => {\r\n        \r\n        \r\n        this.setState({\r\n            ready:true,\r\n            where: {lat: position.coords.latitude,lng:position.coords.longitude }\r\n        })\r\n    }\r\n    geoFailure = (err) => {\r\n        this.setState({error: err.message});\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                { !this.state.ready && (\r\n                <div>Using Geolocation in React Native.</div>\r\n                )}\r\n                { this.state.error && (\r\n                <div>{this.state.error}</div>\r\n                )}\r\n                { this.state.ready && (\r\n                    <div>{\r\n                    `Latitude: ${this.state.where.lat} ||\r\n                    Longitude: ${this.state.where.lng}`\r\n                    }</div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Distance;\r\n","import React from 'react';\r\nimport Distance from './Distance';\r\n\r\nimport * as plugData from \"./plug-location.json\";\r\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl';\r\n\r\n\r\n\r\nclass Map extends React.Component {\r\n  state = {\r\n    selectedPlug: null,\r\n    viewport: {\r\n      latitude: 60.198912,\r\n      longitude: 24.942182,\r\n      width: '100vw',\r\n      height: '100vh',\r\n      zoom: 10,\r\n    }\r\n  }\r\n\r\n    setUserLocation = () => {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n         let setUserLocation = {\r\n             lat: position.coords.latitude,\r\n             long: position.coords.longitude\r\n          };\r\n    \r\n          this.setState({\r\n            setUserLocation: setUserLocation\r\n                        });\r\n                      });\r\n    };\r\n    \r\n  \r\n    render() {\r\n        return (\r\n          <div className=\"map\">\r\n            \r\n            <main>\r\n                \r\n                <ReactMapGL  {...this.state.viewport}\r\n                  mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n                  mapStyle=\"mapbox://styles/akeundo/ck0vicxkj0pd41clpjk9abqki\"\r\n                  onViewportChange={viewport => {\r\n                    this.setState({ viewport });\r\n                  }}\r\n                >\r\n                  {plugData.features.map(plug => (\r\n                    <Marker\r\n                      key={plug.ID}\r\n                      latitude={plug.AddressInfo.Latitude}\r\n                      longitude={plug.AddressInfo.Longitude}\r\n                    >\r\n                    \r\n                      <button class=\"marker\"\r\n                        onClick={e => {\r\n                          e.preventDefault();\r\n                          this.setState({\r\n                            selectedPlug: plug\r\n                          });\r\n                        }}\r\n                      >\r\n                        <img src=\"./electric-car.png\" alt=\"plug\" />\r\n                      </button>\r\n\r\n                    </Marker>\r\n                  ))}\r\n\r\n                  {this.state.selectedPlug ? (\r\n                    <Popup\r\n                      latitude={this.state.selectedPlug.AddressInfo.Latitude}\r\n                      longitude={this.state.selectedPlug.AddressInfo.Longitude}\r\n                      onClose={() => {\r\n                        this.setState({\r\n                          selectedPlug: null\r\n                        });\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        <h2>{this.state.selectedPlug.AddressInfo.Title}</h2>\r\n                        <h2>{this.state.selectedPlug.AddressInfo.AddressLine1}</h2>\r\n                        <h2>{this.state.selectedPlug.AddressInfo.AddressLine2}</h2>\r\n                        <h2>{this.state.selectedPlug.AddressInfo.Postcode}</h2>\r\n                        <h2>{this.state.selectedPlug.AddressInfo.Town}</h2>\r\n\r\n                      </div>\r\n                    </Popup>\r\n                  ) : null}\r\n\r\n                \r\n                </ReactMapGL>\r\n                <Distance/>\r\n            </main>\r\n            \r\n          </div>\r\n          );\r\n      }\r\n}\r\n \r\nexport default Map;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SignUpForm extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            name: '',\r\n            hasAgreed: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        let target = e.target;\r\n        let value = target.type === 'checkbox' ? target.checked : target.value;\r\n        let name = target.name;\r\n\r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        console.log('The form was submitted with the following data:');\r\n        console.log(this.state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"FormCenter\">\r\n            <form onSubmit={this.handleSubmit} className=\"FormFields\">\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"name\">Full Name</label>\r\n                <input type=\"text\" id=\"name\" className=\"FormField__Input\" placeholder=\"Enter your full name\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\r\n              </div>\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n              </div>\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"email\">E-Mail Address</label>\r\n                <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your email\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n              </div>\r\n​\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__CheckboxLabel\">\r\n                    <input className=\"FormField__Checkbox\" type=\"checkbox\" name=\"hasAgreed\" value={this.state.hasAgreed} onChange={this.handleChange} /> I agree all statements in <Link to=\"\" className=\"FormField__TermsLink\">terms of service</Link>\r\n                </label>\r\n              </div>\r\n​\r\n              <div className=\"FormField\">\r\n                  <button className=\"FormField__Button mr-20\">Sign Up</button> <Link to=\"/sign-in\" className=\"FormField__Link\">I'm already member</Link>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignUpForm;","import React, { Component } from 'react';\r\nimport { HashRouter as Router, Route, NavLink } from 'react-router-dom';\r\nimport SignUpForm from './SignUpForm';\r\n// import SignInForm from './SignInForm';\r\n\r\nimport './Forms.css';\r\n\r\nclass Form extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename=\"/react-auth-ui/\">\r\n        <div className=\"Form\">\r\n          <div className=\"App__Aside\"></div>\r\n          <div className=\"App__Form\">\r\n            <div className=\"PageSwitcher\">\r\n                {/* <NavLink to=\"/sign-in\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item\">Sign In</NavLink> */}\r\n                <NavLink to=\"/register\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item\">Sign Up</NavLink>\r\n              </div>\r\n​\r\n              <div className=\"FormTitle\">\r\n                  {/* <NavLink to=\"/sign-in\" activeClassName=\"FormTitle__Link--Active\" className=\"FormTitle__Link\">Sign In</NavLink> or  */}\r\n                  <NavLink exact to=\"/register\" activeClassName=\"FormTitle__Link--Active\" className=\"FormTitle__Link\">Sign Up</NavLink>\r\n              </div>\r\n​\r\n              <Route path=\"/register\" component={SignUpForm}>\r\n              </Route>\r\n              {/* <Route path=\"/login\" component={SignInForm}>\r\n              </Route> */}\r\n          </div>\r\n​\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass SignInForm extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        let target = e.target;\r\n        let value = target.type === 'checkbox' ? target.checked : target.value;\r\n        let name = target.name;\r\n\r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        console.log('The form was submitted with the following data:');\r\n        console.log(this.state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"FormCenter\">\r\n            <form onSubmit={this.handleSubmit} className=\"FormFields\">\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"email\">E-Mail Address</label>\r\n                <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your email\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n              </div>\r\n​\r\n              <div className=\"FormField\">\r\n                <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n              </div>\r\n​\r\n              <div className=\"FormField\">\r\n                  <button className=\"FormField__Button mr-20\">Sign In</button> <Link to=\"/\" className=\"FormField__Link\">Create an account</Link>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignInForm;\r\n","import React from 'react';\r\n\r\nimport './animate.css';\r\nimport Navbar from './components/Navbar';\r\nimport Sidebar from './components/sidebar/Sidebar';\r\nimport Map from './components/Map';\r\nimport Api from './components/Api';\r\nimport Form from './components/Form';\r\nimport SignInForm from './components/SignInForm';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport './App.css';\r\n\r\n// import Backdrop from './components/sidebar/Backdrop';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    sidebarOpen: false,  \r\n  };\r\n\r\n  ToggleClickHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { sidebarOpen: !prevState.sidebarOpen };\r\n    });\r\n  };\r\n\r\n  backdropClickHandler = () => {\r\n    this.setState({ sidebarOpen: false });\r\n  };\r\n\r\n  render() {\r\n    let sidebar;\r\n    // let backdrop;\r\n\r\n    if (this.state.sidebarOpen) {\r\n      sidebar = <Sidebar />;\r\n      // backdrop = <Backdrop click={this.backdropClickHandler} />;\r\n\r\n    }\r\n    return (\r\n      <Router>\r\n        <div style={{height: '100%'}}>\r\n          <Navbar drawerClickHandler={this.ToggleClickHandler} />\r\n          {sidebar}\r\n          <Switch>\r\n             <Route path=\"/stations\" exact component={Api}/> \r\n             <Route path=\"/login\" exact component={SignInForm}/> \r\n             <Route exact path=\"/register\" component={Form}/> \r\n             {/* <Route path=\"/\" component={} /> */}\r\n             {/* {backdrop} */}\r\n             <Map />\r\n\r\n          </Switch>\r\n        </div>\r\n      </Router> \r\n\r\n\r\n            \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}